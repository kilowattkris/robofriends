{"version":3,"sources":["components/ErrorBoundary.js","components/SeachBar.js","components/Scroll.js","api/userApi.js","features/robots/robotsSlice.js","containers/App.js","reportWebVitals.js","store.js","index.js"],"names":["ErrorBoundary","props","state","hasError","error","info","this","setState","children","React","Component","SearchBar","setSearch","className","style","borderColor","type","placeholder","onChange","event","target","value","Scroll","maxHeight","userAPI","fetchUsers","fetch","result","json","fetchRobots","createAsyncThunk","robotsSlice","createSlice","name","initialState","loading","robots","reducers","extraReducers","builder","addCase","pending","action","fulfilled","configUsers","payload","users","map","user","createImgSrc","imgSrc","id","imgAlt","actions","success","failed","CardList","lazy","App","useSelector","dispatch","useDispatch","useState","search","useEffect","filteredRobots","filter","robot","toLowerCase","includes","length","fallback","cards","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","robotsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAqBeA,E,kDAlBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAU,GAHK,E,qDAMnB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAE3B,WACE,OAAGG,KAAKJ,MAAMC,SACL,iEAEAG,KAAKL,MAAMO,a,GAdIC,IAAMC,WCMnBC,G,MANG,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAClB,OAAO,qBAAKC,UAAU,YAAf,SACL,uBAAOA,UAAU,qCAAqCC,MAAO,CAACC,YAAa,WAAYC,KAAK,SAASC,YAAY,SAASC,SAAU,SAACC,GAAD,OAAWP,EAAUO,EAAMC,OAAOC,cCE3JC,EAJA,SAACrB,GACd,OAAO,qBAAKY,UAAU,iDAAiDC,MAAO,CAACS,UAAU,uBAAlF,SAA2GtB,EAAMO,Y,+BCM3GgB,EAPC,CACRC,WADQ,WACM,OAAD,0HACIC,MAJJ,8CAGA,cACXC,EADW,yBAEVA,EAAOC,QAFG,+C,OCARC,EAAcC,YACzB,qBACAN,EAAQC,YASGM,EAAcC,YAAY,CACrCC,KAAM,SACNC,aARmB,CACnBC,SAAS,EACTC,OAAQ,GACRhC,MAAO,MAMPiC,SAAU,GAEVC,cAAe,SAACC,GAEdA,EAAQC,QAAQX,EAAYY,SAAS,SAACvC,EAAOwC,GAC3CxC,EAAMiC,SAAU,KAElBI,EAAQC,QAAQX,EAAYc,WAAW,SAACzC,EAAOwC,GAE7CxC,EAAMkC,OAASQ,EAAYF,EAAOG,SAClC3C,EAAMiC,SAAU,QAKhBS,EAAc,SAAAE,GAClB,OAAOA,EAAMC,KAAI,SAAAC,GAAI,OAAIC,EAAaD,OAGlCC,EAAe,SAACD,GAGpB,OAFAA,EAAKE,OAAL,+BAAsCF,EAAKG,GAA3C,QACAH,EAAKI,OAASJ,EAAKf,KACZe,GAIF,EAAqCjB,EAAYsB,QAEzCtB,GAFR,EAAQU,QAAR,EAAiBa,QAAjB,EAA0BC,OAElBxB,EAAf,SCrCMyB,EAAW/C,IAAMgD,MAAK,kBAAM,gCAgCnBC,EA9BH,WACV,IAAMtB,EAASuB,aAAY,SAACzD,GAAD,OAAWA,EAAMkC,OAAOA,UAC7CwB,EAAWC,cACjB,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAenD,EAAf,KAEAoD,qBAAU,WACRJ,EAAS/B,OACR,CAAC+B,IAEJ,IAAMK,EAAiB7B,EAAO8B,QAAO,SAACC,GAAD,OAAWA,EAAMlC,KAAKmC,cAAcC,SAASN,EAAOK,kBAEzF,OAAOhC,EAAOkC,OACZ,sBAAKzD,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,6CACA,cAAC,EAAD,CAAWD,UAAWA,OAExB,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,WAAD,CAAU2D,SAAU,wBAApB,SACE,cAACf,EAAD,CAAUgB,MAAOP,aAMzB,oBAAIpD,UAAU,kBAAd,yBCxBW4D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJDQ,EAAQC,YAAe,CAClCC,QAAS,CACPhD,OAAQiD,KCGZC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,IAAMM,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.7b2a1173.chunk.js","sourcesContent":["import React from \"react\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n  componentDidCatch(error, info) {\n    this.setState({hasError: true});\n  }\n  render() {\n    if(this.state.hasError) {\n      return <h1>Oops, something has gone wrong!</h1>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundary;","import React from \"react\";\n\nconst SearchBar = ({setSearch}) => {\n  return <div className=\"SearchBar\">\n    <input className=\"rounded p-1 m-2 text-center border\" style={{borderColor: \"#0ccac4\"}} type=\"search\" placeholder=\"Search\" onChange={(event) => setSearch(event.target.value)} />\n  </div>\n};\n\nexport default SearchBar;","import React from \"react\";\n\nconst Scroll = (props) => {\n  return <div className=\"overflow-y-auto border-t border-b border-white\" style={{maxHeight:`calc(100vh - 130px)`}}>{props.children}</div>;\n};\n\nexport default Scroll;","const USER_API_URL = \"https://jsonplaceholder.typicode.com/users\";\n\nconst userAPI = {\n  async fetchUsers() {\n    const result = await fetch(USER_API_URL);\n    return result.json();\n  },\n};\n\nexport default userAPI;","import userAPI from \"../../api/userApi\";\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const fetchRobots = createAsyncThunk(\n  \"robots/fetchRobots\",\n  userAPI.fetchUsers\n);\n\nconst initialState = {\n  loading: true,\n  robots: [],\n  error: null\n};\n\nexport const robotsSlice = createSlice({\n  name: 'robots',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchRobots.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchRobots.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.robots = configUsers(action.payload);\n      state.loading = false;\n    });\n  }\n});\n\nconst configUsers = users => {\n  return users.map(user => createImgSrc(user));\n};\n\nconst createImgSrc = (user) => {\n  user.imgSrc = `https://robohash.org/${user.id}.png`;\n  user.imgAlt = user.name;\n  return user;\n};\n\n// Action creators are generated for each case reducer function\nexport const { pending, success, failed } = robotsSlice.actions;\n\nexport default robotsSlice.reducer;","import React, { useState, useEffect, Suspense} from \"react\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.css\";\nimport SearchBar from \"../components/SeachBar\";\nimport Scroll from \"../components/Scroll\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {fetchRobots} from '../features/robots/robotsSlice';\n\nconst CardList = React.lazy(() => import(\"../components/CardList\"));\n\nconst App = () => {\n  const robots = useSelector((state) => state.robots.robots);\n  const dispatch = useDispatch();\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    dispatch(fetchRobots())\n  }, [dispatch]);\n\n  const filteredRobots = robots.filter((robot) => robot.name.toLowerCase().includes(search.toLowerCase()));\n\n  return robots.length ? (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Robofriends</h1>\n        <SearchBar setSearch={setSearch} />\n      </header>\n      <ErrorBoundary>\n        <Scroll>\n          <Suspense fallback={<div></div>}>\n            <CardList cards={filteredRobots}/>\n          </Suspense>\n        </Scroll>\n      </ErrorBoundary>\n    </div>\n  ) : (\n    <h1 className=\"absolute-center\">Loading...</h1>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport robotsReducer from \"./features/robots/robotsSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    robots: robotsReducer\n  },\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}